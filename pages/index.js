import { useState } from 'react';
import Graph from "react-graph-vis";
import { v4 as uuidv4 } from "uuid";
import Head from 'next/head'
import styles from '../styles/Home.module.css'

const options = {
  layout: {
    hierarchical: {
      enabled: false,
    }
  },
  edges: {
    color: "#ABABAB"
  },
  nodes: {
    color: "#BBBBBB"
  },
  physics: {
    enabled: false
  },
  interaction: { multiselect: false, dragView: false }
};

const defaultGraph = {
  nodes: [
    { id: 1, label: "Start", title: null }
  ],
  edges: []
};

export default function Home() {
  const [graphData, setGraphData] = useState(defaultGraph);
  const [firstNode, setFirstNode] = useState(1);
  const [secondNode, setSecondNode] = useState(1);
  const [inputString, setInputString] = useState('');

  const addNewState = (accptingState) => {
    let newGraph = JSON.parse(JSON.stringify(graphData));
    const ids = newGraph.nodes.map(x => x.id);
    const newId = Math.max(...ids) + 1;
    newGraph.nodes.push(accptingState ?
      { id: newId, label: `Q${newId}`, borderWidth: 3, color: { border: '#000000' }, title: 'accepting'}
      : { id: newId, label: `Q${newId}`, title: null }
    );
    setGraphData(newGraph);
  }

  const addEdge = (nodeId1, nodeId2, label = '0') => {
    let newGraph = JSON.parse(JSON.stringify(graphData));
    newGraph.edges.push({ from: parseInt(nodeId1), to: parseInt(nodeId2), label: label, smooth: { enabled: true, type: 'curvedCW', roundness: 1 } });
    setGraphData(newGraph);

    console.log(newGraph.edges)
  };

  const handleState1Change = (event) => {
    setFirstNode(event.target.value);
  };

  const handleState2Change = (event) => {
    setSecondNode(event.target.value);
  }

  const resetGraph = () => {
    setGraphData(defaultGraph);
  };

  // Allow only binary strings
  const handleStringInput = (e) => e.target.value.match(/(^[01]+$|^$)/g) && setInputString(e.target.value);

  const checkInputString = () => {
    const currNode = 1;
    const accepted = true;
    [...inputString].forEach((value, idx) => {
      let nextEdge = graphData.edges.find(x => x.from === currNode && x.label === value);
      if (nextEdge ) {
        currNode = nextEdge.to;
        
        // Check if last state is accepting state
        if (idx === inputString.length - 1) {
          const currentNode = graphData.nodes.find(x => x.id === currNode);
          accepted = !!currentNode.title && currentNode.title === "accepting";
        }

        return
      } else {
        accepted = false;
      }
    });

    alert(accepted ? 'String accepted' : 'String not accepted');
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div style={{ width: '80%' }}>
          <div className="form-group">
            <button className="btn btn-secondary m-2" onClick={resetGraph}>Reset DFA</button>

            <button className="btn btn-secondary m-2" onClick={() => addNewState()}>Add new state</button>
            <button className="btn btn-secondary m-2" onClick={() => addNewState(true)}>Add new accepting state</button>
          </div>

          <div className="row">
            <div className="form-group col-sm-3 m-2">
              <label>Pick state 1:</label>
              <select value={firstNode} className="form-control" onChange={handleState1Change}>
                {graphData.nodes.map(node => <option key={uuidv4()} value={node.id}>{node.label}</option>)}
              </select>
            </div>
            <div className="form-group col-sm-3 m-2">
              <label>Pick state 2:</label>
              <select value={secondNode} className="form-control" onChange={handleState2Change}>
                {graphData.nodes.map(node => <option key={uuidv4()} value={node.id}>{node.label}</option>)}
              </select>
            </div>
            <div className="form-group col-sm-3 m-2 d-flex">
              <div className="btn-group align-self-end" role="group" aria-label="Add edge">
                <input type="button" className="btn btn-primary" onClick={() => addEdge(firstNode, secondNode)} value="Add 0 edge" />
                <input type="button" className="btn btn-primary" onClick={() => addEdge(firstNode, secondNode, '1')} value="Add 1 edge" />
              </div>  
            </div>
          </div>

          <div className="row">
            <div className="form-group col-sm-6 m-2">
              <label>Binary input string: </label>
              <input type="text" value={inputString}
                className="form-control"
                onChange={handleStringInput} 
                placeholder="Input string..." />
            </div>
            <div className="form-group col-sm-4 d-flex m-2">
              <input type="button" onClick={checkInputString} className="btn btn-success align-self-end"  value="Check string" />
            </div>
          </div>
        </div>
        
        <div style={{ height: "50vh", width: "80vw", border: "1px solid" }}>
          <Graph
            key={uuidv4()}
            graph={graphData}
            options={options}
          />
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href=""
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          Mike
        </a>
      </footer>
    </div>
  )
}
